(function() {
	'use strict';

	angular
		.module('attendances')
		.controller('AttendancesListController', AttendancesListController);

	AttendancesListController.$inject = ['Authentication', 'AttendancesService', 'CommonService', 'CheckInAttendancesServices', '$scope', '$mdDialog', 'userResolve', '$timeout', 'ATTENDANCE', 'PERMISSION', 'LEAVE', 'Notification'];

	function AttendancesListController(Authentication, AttendancesService, CommonService, CheckInAttendancesServices, $scope, $mdDialog, userResolve, $timeout, ATTENDANCE, PERMISSION, LEAVE, Notification) {
		var vm = this;

		$scope.model = {
			events: [],
			users: userResolve
		};

		$scope.searchParams = {
			assignee: Authentication.user._id
		};

		$scope.loadInitial = function() {			
			$scope.findAttendancesByUser();
		};

		$scope.dayClick = function(date, allDay, jsEvent, view) {
			var events = $('#calendar').fullCalendar('clientEvents');
			// Validate the leave overlap 
			var leaveEvents = _.filter(events, function(event) {
				return event.category === LEAVE;
			});
			var alreadyAppliedLeave = false;
			angular.forEach(leaveEvents, function(leaveEvent) {
				if (!alreadyAppliedLeave) {
					if (moment(date).format('YYYY-MM-DD') >= moment(leaveEvent.start).format('YYYY-MM-DD') && moment(date).format('YYYY-MM-DD') <= moment(leaveEvent.end).format('YYYY-MM-DD')) {
						alreadyAppliedLeave = true;
					}
				}
			});
			if (alreadyAppliedLeave) {
				Notification.error({
					message: "Already applied Leave on the date " + moment(date).format('YYYY-MM-DD'),
					title: '<i class="glyphicon glyphicon-remove"></i> Error: Leave Overlap '
				});
				return;
			}
			var now = moment(new Date()).format('YYYY-MM-DD');
			var selectedData = moment(date).format('YYYY-MM-DD');
			var oldShow = $mdDialog.show;
			$mdDialog.show = function(options) {
				if (options.hasOwnProperty("skipHide")) {
					options.multiple = options.skipHide;
				}
				return oldShow(options);
			};
			if (selectedData > now || selectedData === now) {
				var confirm = $mdDialog.confirm().title('Do you apply leave or permission?').ok('Apply Leave').cancel('Permission').multiple(true).clickOutsideToClose(false).escapeToClose(false);
				$mdDialog.show(confirm).then(function() {
					openLeaveOrPermissionDialog(date, true, undefined, true);
				},
				function() {
					openLeaveOrPermissionDialog(date, false, undefined, true);
				});
			} else {
				var confirm = $mdDialog.confirm().title("Don't allow to apply leave/permission for past days!!!").ok('OK');
				$mdDialog.show(confirm).then(function() {
					$mdDialog.hide();
				},
				function() {
					console.log('no');
				});
			}
		};

		$scope.findAttendancesByUser = function() {	
			$scope.model.events.length = 0;	
			CheckInAttendancesServices.requestFindAttendancesByUser({
				userId: $scope.searchParams.assignee
			}).then(function(attendances) {
				angular.forEach(attendances, function(attendance) {
					if(attendance.checkInTime) {
						eventsPush(attendance);
					}
					if(attendance.applyPermission) {
						eventsPermissionPush(attendance);
					}
					if(attendance.applyLeave) {
						eventsLeavePush(attendance);
					}
				});
				initFullCalendar();
				fullCalenderRerender();
			});
		};

		$scope.eventClick = function(event) {
			var oldShow = $mdDialog.show;
			$mdDialog.show = function(options) {
				if (options.hasOwnProperty("skipHide")) {
					options.multiple = options.skipHide;
				}
				return oldShow(options);
			};

			if(event.category == ATTENDANCE) {
				openAttendanceDialog(event);
			} else if(event.category == PERMISSION) {
				openLeaveOrPermissionDialog(event.start, false, event, false);
			} else if(event.category == LEAVE) {
				openLeaveOrPermissionDialog(event.start, true, event, false);
			} 

			
		}

		$scope.renderView = function(view) {
			//alert(view)
		}


		//with this you can handle the events that generated by droping any event to different position in the calendar
		$scope.alertOnDrop = function(event, dayDelta, minuteDelta, allDay, revertFunc, jsEvent, ui, view) {
			$scope.$apply();
		};


		//with this you can handle the events that generated by resizing any event to different position in the calendar
		$scope.alertOnResize = function(event, dayDelta, minuteDelta, revertFunc, jsEvent, ui, view) {
			$scope.$apply();
		};

		function initFullCalendar() {
			var calendar = $('#calendar').fullCalendar({
				editable: false,
				displayEventTime: false,
				height: $(window).height() - 200,
				header: {
					left: 'prev,next today',
					center: 'title',
					right: 'month,agendaWeek,agendaDay'
				},
				events: $scope.model.events,
				defaultView: 'month',
				navLinks: true,
				eventLimit: false,
				dayClick: $scope.dayClick,
				eventDrop: $scope.alertOnDrop,
				eventResize: $scope.alertOnResize,
				eventClick: $scope.eventClick,
				viewRender: $scope.renderView,
				eventRender: function(event, element, view) {
					if (event.category === ATTENDANCE) {
						var inTime = "In: " + moment(event.start).format('hh:mm a');
						var outTime = event.end ? "Out: " + moment(event.end).format('hh:mm a') : '';
						var hour = 0;
						var minute = 0;
						var second = 0;
						angular.forEach(event.breakTimes, function(breakTime) {
							var splitTime = breakTime.breakDiff.split(':');
							hour += parseInt(splitTime[0]);
							minute += parseInt(splitTime[1]);
							second += parseInt(splitTime[2]);
						});
						if (second >= 60) {
							minute += rawQuotient(second);
							second = second % 60;
						}
						if (minute >= 60) {
							hour = rawQuotient(minute);
							minute = minute % 60;
						}
						var breaks = event.breakTimes ? 'Break: ' + aZero(hour) + ':' + aZero(minute) + ':' + aZero(second) + ' mins' : "";
						element.find('.fc-title').append('<div class="hr-line-solid-no-margin" style="text-align: center"><span style="font-size: 10px">' + inTime + ' <br/>' + outTime + ' <br/>' + breaks + '</span></div>');
					} else if(event.category === PERMISSION) {
						var inTime = "From: " + moment(event.start).format('hh:mm a');
						var outTime = "To: " + moment(event.end).format('hh:mm a');
						element.find('.fc-title').append('<div class="hr-line-solid-no-margin" style="text-align: center"><span style="font-size: 10px"><strong style="font-size: 12px;"><u>Permission</u>:</strong> <br/>' + inTime + ' <br/>' + outTime + ' <br/></span></div>');
					} else if(event.category === LEAVE) {
						var inTime = "From: " + moment(event.start).format('YYYY-MM-DD');
						var outTime = "To: " + moment(event.end).format('YYYY-MM-DD');
						element.find('.fc-title').append('<div class="hr-line-solid-no-margin" style="text-align: center"><span style="font-size: 10px; text-align: center"><strong style="font-size: 12px;"><u>Leave</u>:</strong> <br/>' + inTime + ' <br/>' + outTime + ' <br/></span></div>');
					}					
				},
				dayRender: function(date, cell) {
					if ((new Date(date).getFullYear() === new Date().getFullYear()) && (new Date(date).getMonth() === new Date().getMonth()) && (new Date(date).getDate() === new Date().getDate()))
						cell.css("background-color", "#00BFFF");
				}
			});
		};

		function openAttendanceDialog(event) {
			AttendancesService.get({
				attendanceId: event._id
			}, function(data) {
				$mdDialog.show({
					controller: 'AttendancesController',
					controllerAs: 'vm',
					templateUrl: '/modules/attendances/client/views/form-attendance.client.view.html',
					parent: angular.element(document.body),
					clickOutsideToClose: false,
					escapeToClose: false,
					fullscreen: true,
					resolve: {
						attendanceResolve: function() {
							return data;
						}
					},
				})
				.then(function(updatedItem) {

				}, function() {
					console.log('You cancelled the dialog.');
				});
			});
		}

		function openLeaveOrPermissionDialog(date, hasApplyLeave, attendanceResolve, createMode) {			
			$mdDialog.show({
				controller: 'LeaveOrPermissionController',
				controllerAs: 'vm',
				templateUrl: '/modules/attendances/client/views/leave-attendance.client.view.html',
				parent: angular.element(document.body),
				clickOutsideToClose: false,
				escapeToClose: false,
				fullscreen: true,
				resolve: {
					selectedDate: function() {
						return date;
					},
					hasApplyLeave: function() {
						return hasApplyLeave;
					},
					selectedData: function() {
						return attendanceResolve;
					},
					createMode: function() {
						return createMode;
					},
					userId: function() {
						return $scope.searchParams.assignee;
					}
				},
			})
			.then(function(updatedItem) {
				if (!createMode || updatedItem.isDelete) {	
					var index = CommonService.findIndexByID($scope.model.events, attendanceResolve._id);				
					$scope.model.events.splice(index, 1);
				}
				if (!updatedItem.isDelete) {
					if (hasApplyLeave) {
						eventsLeavePush(updatedItem);
					} else {
						eventsPermissionPush(updatedItem);
					}
				}				
				
				fullCalenderRerender();
			}, function() {
				console.log('You cancelled the dialog.');
			});
		};

		function eventsPush(attendance) {
			$scope.model.events.push({
				_id: attendance._id,
				title: '',
				start: new Date(attendance.checkInTime),
				end: new Date(attendance.checkOutTime),
				breakTimes: attendance.breakTime,
				category: ATTENDANCE,
				className: 'bg-blue',
				stick: true
			});
		};

		function eventsPermissionPush(attendance) {
			$scope.model.events.push({
				_id: attendance._id,
				title: '',
				start: new Date(attendance.applyPermission.startTime),
				end: new Date(attendance.applyPermission.endTime),
				breakTimes: [],
				category: PERMISSION,
				reason: attendance.reason,
				className: 'bg-green',
				stick: true
			});
		};

		function eventsLeavePush(attendance) {
			$scope.model.events.push({
				_id: attendance._id,
				title: '',
				start: new Date(attendance.applyLeave.startTime),
				end: new Date(attendance.applyLeave.endTime),
				breakTimes: [],
				category: LEAVE,
				reason: attendance.reason,
				className: 'bg-red',
				stick: true
			});
		};

		function rawQuotient(value) {
			var rawQuotient = value / 60;
			var remainder = rawQuotient % 1;
			var quotient = rawQuotient - remainder;
			return quotient;
		}

		function aZero(n) {
			return n.toString().length == 1 ? n = '0' + n : n;
		}

		function fullCalenderRerender() {
			$('#calendar').fullCalendar('removeEvents');
			$('#calendar').fullCalendar('addEventSource', $scope.model.events);
			$('#calendar').fullCalendar('rerenderEvents');
		}
	}
}());