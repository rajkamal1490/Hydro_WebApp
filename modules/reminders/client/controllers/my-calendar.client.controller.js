(function() {
  'use strict';

  angular
    .module('reminders')
    .controller('MyCalendarController', MyCalendarController);

  MyCalendarController.$inject = ['Authentication', 'CommonService', 'EmployeeMeetingsService', 'reminderResolve', '$scope', '$timeout', 'REMINDER', 'MEETING'];

  function MyCalendarController(Authentication, CommonService, EmployeeMeetingsService, reminderResolve, $scope, $timeout, REMINDER, MEETING) {
    var vm = this;

    $scope.model = {
      events: []
    }

    $scope.loadInitial = function() {
      angular.forEach(reminderResolve, function(reminder) {
        eventsPush(reminder);
      });
      $scope.findMyMeetings();
    };

    $scope.dayClick = function(date, allDay, jsEvent, view) {
      
    }

    $scope.eventClick = function(event) {
      
    }

    $scope.renderView = function(view) {
      //alert(view)
    }


    //with this you can handle the events that generated by droping any event to different position in the calendar
    $scope.alertOnDrop = function(event, dayDelta, minuteDelta, allDay, revertFunc, jsEvent, ui, view) {
      $scope.$apply();
    };


    //with this you can handle the events that generated by resizing any event to different position in the calendar
    $scope.alertOnResize = function(event, dayDelta, minuteDelta, revertFunc, jsEvent, ui, view) {
      $scope.$apply();
    };

    $scope.findMyMeetings = function() {
      EmployeeMeetingsService.requestFindMyMeetingsByUser({
        userId: Authentication.user._id
      }).then(function(meetings) {
        angular.forEach(meetings, function(meeting) {
          eventsMeetingsPush(meeting);
        });
        initFullCalendar();
        fullCalenderRerender();
      });
    };

    function eventsPush(reminder) {
      $scope.model.events.push({
        _id: reminder._id,
        name: reminder.title,
        start: new Date(reminder.reminderDateTime),
        className: reminder.hasReminded ? 'bg-blue' : 'bg-red',
        stick: true,
        type: REMINDER
      });
    };

    function eventsMeetingsPush(meeting) {
      $scope.model.events.push({
        _id: meeting._id,
        name: meeting.title,
        start: new Date(meeting.startDateTime),
        end: new Date(meeting.endDateTime),
        className: meeting.facilitator._id === Authentication.user._id ? 'bg-yellow' : 'bg-pink',
        stick: true,
        type: MEETING
      });
    };

    function initFullCalendar() {
       var calendar = $('#calendar').fullCalendar({
        editable: false,
        displayEventTime: false,
        height: $(window).height(),
        header: {
          left: 'prev,next today',
          center: 'title',
          right: 'month,agendaWeek,agendaDay'
        },
        events: $scope.model.events,
        defaultView: 'month',
        navLinks: true,
        eventLimit: true,
        dayClick: $scope.dayClick,
        eventDrop: $scope.alertOnDrop,
        eventResize: $scope.alertOnResize,
        eventClick: $scope.eventClick,
        viewRender: $scope.renderView,
        eventRender: function(event, element, view) {                   
          element.find('.fc-content').append('<span style="font-size: 10px">' + event.name + '</span>');                  
        },
        dayRender: function(date, cell) {
          if ((new Date(date).getFullYear() === new Date().getFullYear()) && (new Date(date).getMonth() === new Date().getMonth()) && (new Date(date).getDate() === new Date().getDate()))
            cell.css("background-color", "#00BFFF");
        }
      });
    }

    function fullCalenderRerender() {
      $('#calendar').fullCalendar('removeEvents');
      $('#calendar').fullCalendar('addEventSource', $scope.model.events);
      $('#calendar').fullCalendar('rerenderEvents');
    }

  }
}());